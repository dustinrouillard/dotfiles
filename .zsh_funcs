random () {
  LENGTH=$1
  if [[ $LENGTH = "" ]]; then; LENGTH=32; fi
  RANDOM_STRING=$(openssl rand -${2:-hex} ${LENGTH})
  echo ${RANDOM_STRING}
}

playsong() {
	COMMAND=`(http POST https://spoticontrol.dstn.to/randomsong\?account\=aa40vmwdb42d7keg8lmjdfrva\&key\=${SPOTICONTROL_KEY}\&filter\=rediscover\&device_name\=Dustin\'s%20M1 -b &)`
	DATA=`echo $COMMAND | jq .data`
	TRACK=`echo $DATA | jq .track`
	PLAYLIST=`echo $DATA | jq .playlist`
	DEVICE=`echo $DATA | jq .device`
	POSITION=`echo $DATA | jq .position`
	DATE=`gdate -d $(echo $DATA | jq .date | cut -d '"' -f2) '+%A, %B %d, %Y at %H:%M:%S'`

	TRACK_NAME=$(printf "\e]8;;https://open.spotify.com/spotify/track/$(echo $TRACK | jq .id | cut -d\" -f2)\e\\$(echo $TRACK | jq .name | cut -d\" -f2)\e]8;;\e\\")
	PLAYLIST_NAME=$(printf "\e]8;;https://open.spotify.com/spotify/playlist/$(echo $PLAYLIST | jq .id | cut -d\" -f2)\e\\$(echo $PLAYLIST | jq .name | cut -d\" -f2)\e]8;;\e\\")

	curl -Ls $(echo $TRACK | jq .cover | cut -d '"' -f2) | imgcat
	echo "Currently playing : ${TRACK_NAME} by $(echo $TRACK | jq .artist | cut -d '"' -f2)"
	echo "Position #$(echo $POSITION) on playlist $PLAYLIST_NAME"
	echo "Device: $(echo $DEVICE | jq .name | cut -d '"' -f2)"
	echo "Track was added to playlist on : $DATE"
}

randomsong() {
	echo "Going in deep one sec"

	(playsong &)

	echo ""
	echo "Yo bro, you have a lot of playlists, gimme a sec"
	echo ""

	sleep 0.5
	echo "Randomizing to find a song"
	echo ""

	sleep 1
	echo "I think I got one, here we go"
	echo ""
	sleep 3

	echo ""
	echo "Shutting down"
	echo ""

	return 0
}

upload() {
  if [[ "$1" == "./"* ]]; then; FILE="${1}"; else; FILE="${PWD}/${1}"; fi
  ~/Projects/Personal/mac-screenshot/upload-api.sh ${FILE}
}

screenshot() {	
  ~/Projects/Personal/mac-screenshot/screenshot-api.sh
}

shorten() {
  if [ "$1" = "" ]; then; return 1; fi

  TOKEN=$(jwt dstn.to $PERSONAL_SHORTENER_JWT_SECRET 10)
  
  if [[ "$1" = "del" ]]; then
    DELETE_CODE=$(curl -s -X DELETE https://dstn.to/${2} -H "Authorization:$TOKEN")
    echo "Deleted short url (if exists)"

    return 1
  elif [[ "$1" = "visits" ]]; then
    if [ "$2" = "" ]; then
      node -e "console.log(JSON.parse('$(curl -s https://dstn.to/links -H \'authorization:$(jwt dstn.to ${PERSONAL_SHORTENER_JWT_SECRET} 10)\' | jq -c)').map(link => \`Code   : \${link.code}\nVisits : \${link.visits.toLocaleString()}\nTarget : \${link.target}\`).join('\n\n'))"
      return 0
    fi
    
    CODE_INFORMATION=$(curl -s https://dstn.to/${2}/stats -H "Authorization:$TOKEN" | jq -r)

    if [ "$CODE_INFORMATION" = "null" ]; then
      echo "Unable to url with that shortcode"
      return 1
    fi
    
    URL_CODE=$(echo $CODE_INFORMATION | jq -r .code)
    URL_TARGET=$(echo $CODE_INFORMATION | jq -r .target)
    URL_VISITS=$(echo $CODE_INFORMATION | jq -r .visits)

    echo "Short URL Statistics"
    echo ""
    echo "Code   : ${URL_CODE}"
    echo "Visits : ${URL_VISITS}"
    echo "Target : ${URL_TARGET}"
    echo ""

    return 1
  #elif [[ "$1" != http* ]]; then
  #  echo "Link starting with http is required"
  #  return 1
  fi

  if [ "$2" = "" ]; then
    URL_CREATE=$(curl -s -X POST https://dstn.to/create -H "Authorization:$TOKEN" -H 'Content-Type: application/json' --data-raw "{\"target\": \"$1\"}")
  else
    URL_CREATE=$(curl -s -X POST https://dstn.to/create -H "Authorization:$TOKEN" -H 'Content-Type: application/json' --data-raw "{\"target\": \"$1\", \"code\": \"$2\"}")
  fi

  URL_CODE=$(echo $URL_CREATE | jq -r .code)

  if [ "$URL_CODE" = "internal_server_error" ]; then
    URL_ERROR=$(echo $URL_CREATE | jq -r .error)
    echo "Failed to shorten url - ${URL_CODE} : ${URL_ERROR}"
    return 1
  fi

  echo "Shortened URL $1 -> https://dstn.to/$URL_CODE"
  echo "https://dstn.to/$URL_CODE" | pbcopy
  return 0
}

lanyard() {
  if [ "$1" = "" ]; then; return 1; fi

  if [ "$1" = "lock" ]; then
	  http PATCH https://canary.discord.com/api/v9/guilds/819285379982557265 authorization:"Bot ${LANYARD_BOT_TOKEN}" features:='["NEWS","AUTO_MODERATION","MEMBER_PROFILES","ANIMATED_BANNER","COMMUNITY","THREE_DAY_THREAD_ARCHIVE","ROLE_ICONS","SEVEN_DAY_THREAD_ARCHIVE","THREADS_ENABLED","VANITY_URL","INVITE_SPLASH","PRIVATE_THREADS","ANIMATED_ICON","BANNER","ENABLED_DISCOVERABLE_BEFORE","INVITES_DISABLED"]' -b | jq .features
  elif [ "$1" = "unlock" ]; then
	  http PATCH https://canary.discord.com/api/v9/guilds/819285379982557265 authorization:"Bot ${LANYARD_BOT_TOKEN}" features:='["NEWS","AUTO_MODERATION","MEMBER_PROFILES","ANIMATED_BANNER","COMMUNITY","THREE_DAY_THREAD_ARCHIVE","ROLE_ICONS","SEVEN_DAY_THREAD_ARCHIVE","THREADS_ENABLED","VANITY_URL","INVITE_SPLASH","PRIVATE_THREADS","ANIMATED_ICON","BANNER","ENABLED_DISCOVERABLE_BEFORE"]' -b | jq .features
  fi
}

mcrcon() {
  if [ "$1" = "" ]; then; return 1; fi

  if [ "$1" = "atmk" ]; then
    POD_NAME=$(kubectl get pods --selector=app=atm8 -n games -o jsonpath='{.items[0].metadata.name}')
    COMMAND=${@:2}

    kubectl exec ${POD_NAME} -n games -- rcon-cli --password ${MCRCON_TOKEN} "${COMMAND}"
  elif [ "$1" = "atm" ]; then
    COMMAND=${@:2}
    #DOCKER_HOST=10.7.20.1:2375
    export MCRCON_TOKEN=968e30e90e55e95b68583503
    CONTAINER_HOST=tcp://10.7.10.4:9009 podman exec -e MCRCON_TOKEN=${MCRCON_TOKEN} -e COMMAND=${COMMAND} atm9-server rcon-cli --password ${MCRCON_TOKEN} "${COMMAND}"
  elif [ "$1" = "create" ]; then
    COMMAND=${@:2}
    export MCRCON_TOKEN=65334bd017acc04fd2534e00
    CONTAINER_HOST=tcp://10.7.20.5:2375 docker exec -e MCRCON_TOKEN=${MCRCON_TOKEN} -e COMMAND=${COMMAND} create_n_puff rcon-cli --password ${MCRCON_TOKEN} "${COMMAND}"
  fi
}

kexec() {
  COMMAND=$(printf '%s' "${@//$1/}")
  DEPLOYMENT="deployments/${1}"
  /usr/local/bin/kubectl exec -it $DEPLOYMENT $COMMAND
}

kedit() {
  DEPLOYMENT="deployments/${1}"
  /usr/local/bin/kubectl edit $DEPLOYMENT
}

krestart() {
  DEPLOYMENT="deployments/${1}"
  /usr/local/bin/kubectl rollout restart $DEPLOYMENT
}

kimage() {
  DEPLOYMENT="deployments/${1}"
  NAME="${1}"
  if [[ "$3" != "" ]]; then; NAME=${3}; fi
  IMAGE="${2}"
  /usr/local/bin/kubectl set image ${DEPLOYMENT} ${NAME}=${IMAGE}
}

kyml() {
 k get ${@} -o=json | jq 'del(.metadata.resourceVersion,.metadata.uid,.metadata.selfLink,.metadata.creationTimestamp,.metadata.annotations,.metadata.generation,.metadata.ownerReferences)' | yq eval - -P
}

ghcrbuild() {
  NAME="${1}"
  DOCKERFILE="${2}"
  ARCH="${3}"
  if [[ "$ARCH" == "" ]]; then; ARCH="linux/amd64"; fi
  COMMIT=$(git rev-parse HEAD | head -c8)
  IMAGE="ghcr.io/dustinrouillard/${NAME}:${COMMIT}"
  docker buildx build --platform ${ARCH} . -f ${DOCKERFILE} -t ${IMAGE} --push
}

pbedit() {
  local _t=$(mktemp)
  chmod 600 "$_t"

  pbpaste > "$_t"
  ${EDITOR:-vi} "$_t"
  pbcopy < "$_t"

  rm -f "$_t"
}

purgedns () {
  sudo dscacheutil -flushcache && sudo killall -HUP mDNSResponder
}

v6() {
	INFO=$(networksetup -getinfo "USB 10/100/1000 LAN" | grep "IPv6: Automatic")
	if [ $? -eq 0 ]; then
		echo "V6 Disabled"
		networksetup -setv6off "USB 10/100/1000 LAN"
	else
		echo "V6 Enabled"
		networksetup -setv6automatic "USB 10/100/1000 LAN"
	fi
}

qr () {
	if [[ "$@" == "" ]]; then; echo "Missing URL"; return 1; fi
	curl -d "$@" https://qrcode.show
}

sourceenv () {
	set -o allexport # enable all variable definitions to be exported
	source <(sed -e "s/\r//" -e '/^#/d;/^\s*$/d' -e "s/'/'\\\''/g" -e "s/=\(.*\)/=\"\1\"/g" ".env")
	set +o allexport
}

vibing() {
	curl -X PATCH https://gw.dstn.to/status --data-raw "{\"message\": \"$1\", \"type\": \"vibing\"}" -H "Authorization:${GATEWAY_AUTH_TOKEN}"
}

sleeping() {
	http PATCH https://gw.dstn.to/status message="$1" type="sleeping" Authorization:${GATEWAY_AUTH_TOKEN}
}
